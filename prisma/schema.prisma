// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboards Billboard[] @relation("storeToBillBoard")
  categories category[]  @relation("storeToCategory")
  sizes      size[]      @relation("StoreToSize")
  colors     color[]     @relation("StoreToColor")
  product    product[]   @relation("storeToProduct")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("storeToBillBoard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("storeToCategory", fields: [storeId], references: [id])
  products    product[] @relation("productToCategory")
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  products  product[] @relation("productToSize")
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model color {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  products  product[] @relation("productToColor")
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model product {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("storeToProduct", fields: [storeId], references: [id])
  name       String
  price      Decimal
  categoryId String
  category   category    @relation("productToCategory", fields: [categoryId], references: [id])
  sizeId     String
  Size       size        @relation("productToSize", fields: [sizeId], references: [id])
  colorId    String
  color      color       @relation("productToColor", fields: [colorId], references: [id])
  isArchived Boolean
  isFeatured Boolean
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  images     image[]
  orderItems OrderItem[]

  @@index([storeId])
  @@index([sizeId])
  @@index([colorId])
  @@index([categoryId])
}

model image {
  id        String   @id @default(uuid())
  url       String
  productId String
  product   product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
